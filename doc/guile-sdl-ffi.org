
* Guile SDL2 FFI Org Document

# org mode comment # followed by one whitespace
# generate html output C-e h o

* SDL2

# got confused org mode code section and github markdown
# yasnippet how do snippets work ?
# snippet stored in ~/.emacs.d/snippets/org-mode/src-block.el


#+begin_src C
#define SDL_INIT_TIMER          0x00000001u
#define SDL_INIT_AUDIO          0x00000010u
#define SDL_INIT_VIDEO          0x00000020u  /**< SDL_INIT_VIDEO implies SDL_INIT_EVENTS */
#define SDL_INIT_JOYSTICK       0x00000200u  /**< SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS */
#define SDL_INIT_HAPTIC         0x00001000u
#define SDL_INIT_GAMECONTROLLER 0x00002000u  /**< SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK */
#define SDL_INIT_EVENTS         0x00004000u
#define SDL_INIT_SENSOR         0x00008000u
#define SDL_INIT_NOPARACHUTE    0x00100000u  /**< compatibility; this flag is ignored. */
#define SDL_INIT_EVERYTHING ( \
                SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS | \
                SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER | SDL_INIT_SENSOR \
            )

extern DECLSPEC int SDLCALL SDL_Init(Uint32 flags);
extern DECLSPEC void SDLCALL SDL_Quit(void);

/* some others */
extern DECLSPEC int SDLCALL SDL_InitSubSystem(Uint32 flags);
extern DECLSPEC void SDLCALL SDL_QuitSubSystem(Uint32 flags);
extern DECLSPEC Uint32 SDLCALL SDL_WasInit(Uint32 flags);

#+end_src


#+begin_src lisp

  
;; init.scm 
  (define-module (graphics sdl2)
    #:export (*init-timer*
  	    ,*init-audio*
  	    ,*init-video*
  	    ,*init-joystick*
  	    ,*init-haptic*
  	    ,*init-gamecontroller*
  	    ,*init-events*
  	    ,*init-sensor*
  	    ,*init-parachute*
  	    ,*init-everything*
  	    sdl-init
  	    sdl-quit))


  #define SDL_INIT_TIMER          0x00000001u
  #define SDL_INIT_AUDIO          0x00000010u
  #define SDL_INIT_VIDEO          0x00000020u  /**< SDL_INIT_VIDEO implies SDL_INIT_EVENTS */
  #define SDL_INIT_JOYSTICK       0x00000200u  /**< SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS */
  #define SDL_INIT_HAPTIC         0x00001000u
  #define SDL_INIT_GAMECONTROLLER 0x00002000u  /**< SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK */
  #define SDL_INIT_EVENTS         0x00004000u
  #define SDL_INIT_SENSOR         0x00008000u
  #define SDL_INIT_NOPARACHUTE    0x00100000u  /**< compatibility; this flag is ignored. */
  #define SDL_INIT_EVERYTHING ( \
                  SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS | \
                  SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER | SDL_INIT_SENSOR \
              )


  (define *init-timer*             #x00000001)
  (define *init-audio*             #x00000010)
  (define *init-video*             #x00000020)
  (define *init-joystick*          #x00000200)
  (define *init-haptic*            #x00001000)
  (define *init-gamecontroller*    #x00002000)
  (define *init-events*            #x00004000)
  (define *init-sensor*            #x00008000)
  (define *init-parachute*         #x00100000)

  ;; guile uses logior to be logical inclusive or 
  (define *init-everything*  (logior *init-timer*
  				   ,*init-audio*
  				   ,*init-video*
  				   ,*init-events*
  				   ,*init-joystick*
  				   ,*init-haptic*
  				   ,*init-gamecontroller*
  				   ,*init-sensor*))

  (define sdl-init
    (foreign-library-function "libSDL2" "SDL_Init"
                              #:return-type int
                              #:arg-types (list int)))

  (define sdl-quit
    (foreign-library-function "libSDL2" "SDL_Quit"
                              #:return-type void
                              #:arg-types (list)))


#+end_src
