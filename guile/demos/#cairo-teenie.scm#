
;; how to run
;;
;; in terminal outside emacs and everything else do this
;;
;; > export LTDL_LIBRARY_PATH="$DEVELOPER/pixelformat/"
;;
;; this will enable guile to find the essential libpixelformat.so shared library we make
;; so we can then go on and dynamically load libSDL2.so the provided SDL2 shared library 
;;
;;  in gieser we set variable  { geiser-guile-init-file } to point to geiser-init-file.scm
;; at toplevel of this project
;;
;; in geiser  - just need to C-c C-z and geiser starts
;; > (cairo) ... eventually should have some graphics + cairo up and running ... 
;;
;; dependencies 
;; 1. libpixelformat.so   
;;  
;;
;; /opt/guile/lib/guile/3.0/extensions/
;; └── libpixelformat.so   <<--- this has %img-load which we need
;; 
;; 
;; macro files pre-installed at /opt/guile/share/guile/site/3.0/macros
;;  
;; /opt/guile/share/guile/site/3.0/macros
;; ├── fcase.scm
;; └── inc.scm
;;
;; sdl ffi files in graphics directory
;;  
;; ├── graphics
;; │   └── sdl2.scm
;; ├── demos
;; │   └── unix-less.scm
;;  
;; rlwrap guile -L ../ --
;; > (load "unix-less.scm")
;;
;; %load-compiled-path  -- where .go files go
;; %load-path --- where source code goes
;; GUILE_EXTENSIONS_PATH
;; (dirname (current-filename))
;; (add-to-load-path)
;; Variable: %load-path
;; List of directories which should be searched for Scheme modules and libraries. When Guile starts up, %load-path is initialized to the default load path (list (%library-dir) (%site-dir) (%global-site-dir) (%package-data-dir)). The GUILE_LOAD_PATH environment variable can be used to prepend or append additional directories (see Environment Variables).
;; (chdir "src")
;; (getcwd)
;; (load "demos/cairo.scm")
;;
(use-modules (ice-9 optargs)) ;; optional args
(use-modules (system foreign)) ;; %null-pointer
(use-modules (system foreign-library))
(use-modules (rnrs bytevectors))

;;(use-modules (ice-9 debug))

;; add macros into load path
;; assuming not already in load path
;;(add-to-load-path (getenv "DEVELOPER"))
;;(add-to-load-path (string-append (getenv "DEVELOPER") "/pixelformat"))

;; enable (use-modules (macros inc))
;; enables (use-modules (macros fcase))

;; this actually works
;;(load-foreign-library (string-append (getenv "DEVELOPER") "/pixelformat/" "libpixelformat.so"))
;;(#:search-path (string-append (getenv "DEVELOPER") "/pixelformat")))
;; should hopefully enable use of (use-modules (graphics sdl2))


(use-modules (ice-9 format))
(use-modules (macros fcase))
(use-modules (macros inc))
;; use sdl graphics module
(use-modules (graphics sdl2))  
;; read-line
(use-modules (ice-9 rdelim))
;; pp pretty printer  
(use-modules (ice-9 pretty-print)) 
(define pp pretty-print)

(define (setup) #f)


(define *keyboard-fn-vector* (make-vector 516 #f)) ;; somewhat largeer than 512

(define (register-keyboard-fn i fn)
  (vector-set! *keyboard-fn-vector* i fn))

;; if there is a procedure at index i in keyboard-fn-vector then call that procedure of no args
(define (call-keyboard-fn i)
  (let ((fn (vector-ref *keyboard-fn-vector* i)))
    (when (procedure? fn)
      (fn))))


(define (make-sdl-rect x y w h)
  (let* ((size 16)
	 (bv (make-bytevector size 0)))
    (bytevector-s32-native-set! bv 0 x);; x
    (bytevector-s32-native-set! bv 4 y);; y
    (bytevector-s32-native-set! bv 8 w);; width
    (bytevector-s32-native-set! bv 12 h);; height
    bv))

(define (make-sdl-rect-pointer x y w h)
  (bytevector->pointer (make-sdl-rect x y w h)))


(define (make-sdl-color red green blue)  (logior (ash red 16) (ash green 8) blue))


(define *mouse-x* 0)
(define *mouse-y* 0)

;; 640 x 480
(define *screen-width* 640)
(define *screen-height* 480)


(define (simple-procedure x)
 " SDL_Surface* SDL_CreateRGBSurface
    (Uint32 flags, int width, int height, int depth,
     Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
Function Parameters
Uint32	flags	the flags are unused and should be set to 0.
int	width	the width of the surface.
int	height	the height of the surface.
int	depth	the depth of the surface in bits.
Uint32	Rmask	the red mask for the pixels.
Uint32	Gmask	the green mask for the pixels.
Uint32	Bmask	the blue mask for the pixels.
Uint32	Amask	the alpha mask for the pixels."
  (+ x 2))


(define (cairo)  
  (let ((font-size 12)
	(lines-per-screen 44) ;; how many lines per screen do we have ??
	(chars-per-line 80) ;; wrapping 80 chars in 
	(screen-width 640)
	(screen-height 480))

    (define event-counter 0)

    
    
    (define init-result (sdl-init *sdl-init-video*))
    (format #t "init-result ~a~%" init-result)
    
    (define window (create-window "cairo demonstration window 0.1a" screen-width screen-height))
    (format #t "window = ~a~%" window)
    
    (define render (%sdl-create-renderer window -1 
					 (logior *sdl-renderer-accelerated*  *sdl-renderer-present-vsync*)))
    (cond
     ((equal? render %null-pointer)   (format #t "create render failed !~%"))
     (#t (format #t "created render success : ~a !~%" render)))

    ;;SDL_Surface * SDL_GetWindowSurface(SDL_Window * window);
    (define window-surface (sdl-get-window-surface window))    

    (format #t "window-surface ~a : pixelformat-format ~a : pixels ~a : width ~a : height ~a : pitch ~a ~%"
	    window-surface	    
	    (surface-pixelformat-format window-surface)
	    (surface-pixels window-surface)
	    (surface-width window-surface)
	    (surface-height window-surface)
	    (surface-pitch window-surface))
    
    (format #t "window surface : pixelformat name ~a ~%"
	    (pointer->string
	     (sdl-get-pixelformat-name
	      (surface-pixelformat-format window-surface))))

    (define surface (create-rgb24-surface screen-width screen-height))
    ;;(define surface window-surface)
    (cond
     ((equal? surface %null-pointer)
      (format #t "surface failed to be created!~%"))
     (#t (format #t "surface ok~%")))

    (format #t "surface          ~a : pixelformat-format ~a : pixels ~a : width ~a : height ~a : pitch ~a ~%"
	    surface
	    (surface-pixelformat-format surface)
	    (surface-pixels surface)
	    (surface-width surface)
	    (surface-height surface)
	    (surface-pitch surface))
    
    (format #t "surface : pixelformat name ~a ~%"
	    (pointer->string
	     (sdl-get-pixelformat-name
	      (surface-pixelformat-format surface))))

    ;; cairo-format-argb32 is 0
    ;; cairo-format-rgb24 is 1
    ;;
    ;; cairo-formats do not talk to sdl-get-pixelformat-name !! ALL types of WRONG here !!
    ;;
    ;; (format #t "reference cairo argb32 is ~a ~%"
    ;; 	    (pointer->string
    ;; 	     (sdl-get-pixelformat-name *cairo-format-argb32*)))

    ;; (format #t "reference cairo rgb24 is ~a ~%"
    ;; 	    (pointer->string
    ;; 	     (sdl-get-pixelformat-name *cairo-format-rgb24*)))
    
    ;; a full routine to do most cairo stuff from c 
    ;;(sanity-check-hack window render surface)

    ;; great - really working !
    ;; a blue square somewhere on render surface
    (sdl-set-render-draw-color render #x00 #x00 #xFF #xFF)	   	   	   
    (let ((bv (make-bytevector (* 4 (size-int)) 0)))
      (bytevector-s32-native-set! bv 0 500)
      (bytevector-s32-native-set! bv 4 100)
      (bytevector-s32-native-set! bv 8 100)
      (bytevector-s32-native-set! bv 12 100)
      (sdl-render-fill-rect render (bytevector->pointer bv)))

    
    #|
    
    ;;CAIRO_FORMAT_ARGB32
    ;;cairo_surface_t * cairo_image_surface_create (cairo_format_t format, int width,  int height);
    ;;(define cairo-surface (cairo-
    ;;(define cairo-surface (cairo-image-surface-create *cairo-format-argb32* screen-width screen-height))
    
    ;; 
    ;; cairo_surface_t * cairo_image_surface_create_for_data (unsigned char *data,
    ;;                                  cairo_format_t format,
    ;;                                  int width,
    ;;                                  int height,
    ;;                                  int stride);

    ;; stride = cairo_format_stride_for_width (format, width);
    ;; data = malloc (stride * height);
    ;; surface = cairo_image_surface_create_for_data (data, format,
    ;; 							 width, height,
    ;; 							 stride);

    (define stride (cairo-format-stride-for-width *cairo-format-rgb24* screen-width))
    (format #t "cairo stride ~a~%" stride)
    (format #t "surface pitch ~a~%" (surface-pitch surface))
    (format #t "surface width ~a~%" (surface-width surface))
    (format #t "surface height ~a~%" (surface-height surface))

    ;; https://www.libsdl.org/release/SDL-1.2.15/docs/html/guidevideo.html
    

    (sdl-lock-surface surface)
    
    ;; gets invalidated if window is resized !!
    (define cairo-surface (cairo-image-surface-create-for-data (surface-pixels surface)
							       *cairo-format-rgb24* ;;*cairo-format-argb32* 
							       (surface-width surface)
							       (surface-height surface)
							       stride))
    (sdl-unlock-surface surface)

    (format #t "cairo surface ~a~%" cairo-surface)
    
    (define cr cairo-surface)
    
    (define cairo-texture %null-pointer)

    (format #t "starting to clear screen ~%")
    ;; clear screen

    ;; set a render color
    (sdl-set-render-draw-color render #xFF #x00 #x00 #xFF)    
    (sdl-render-clear render)
    (format #t "screen render clear ~%")

    ;;(format #t "setting source rgba ~%")
    (cairo-set-source-rgba cr 1 1 1 1) ;; should be doubles ?    
    (cairo-rectangle cr 0 0 screen-width screen-height)
    (cairo-fill cr)
    
    ;;(format #t "set source rgba ~%")
    
    (cairo-set-source-rgba cr 0.5 1 1 1) ;; should be doubles ?    
    (cairo-rectangle cr 200 200 50 100)
    (format #t "cairo rectangle ~%")

    (cairo-fill cr)
    (format #t "cairo fill ~%")

    ;; making texture from cairo-surface or surface ?
    (set! cairo-texture (sdl-create-texture-from-surface render surface))
    (when (not (equal? cairo-texture %null-pointer))
      (sdl-render-copy render cairo-texture %null-pointer %null-pointer))  
    ;; (format #t "cairo texture = ~a~%" cairo-texture)
    
    ;; free - what surface ??

    |#
    
    
    (sdl-render-present render)

    
    
    (sleep 5)

    ;; (when (not (equal? cairo-texture %null-pointer))
    ;;   (sdl-destroy-texture cairo-texture)
    ;;   (set! cairo-texture %null-pointer))

    
    ;; cleanup
    ;; (ttf-close-font font)	     
    ;; (sdl-free-surface hello-bitmap)
    
    (sdl-destroy-renderer render)
    (sdl-destroy-window window)
    
    ;; (ttf-quit)
    ;; (img-quit)
    (sdl-quit)))



#|

(cairo)


|#
