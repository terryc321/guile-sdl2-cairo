;; autogenerated file from documentation sdl.org file via emacs

(define-module (graphics sdl2 sdl)
  #:export (
	    poll-event

	    ;; ======= NOT DOCUMENTED ========= 

	    *true*
	    *false*
	    
	    *init-timer*
	    *init-audio*
	    *init-video*
	    *init-joystick*
	    *init-haptic*
	    *init-gamecontroller*
	    *init-events*
	    *init-sensor*
	    *init-parachute*
	    *init-everything*

	    *pixelformat-argb8888*
	    *texture-streaming*
				   
	    init
	    quit

	    set-color-key

	    
create-window
get-window-surface
free-surface
load-bmp-rw
rw-from-file
load-bmp
show-cursor
load-texture

destroy-window

lock-surface
unlock-surface


get-window-size
get-renderer-output-size

sanity-check-hack ;; <<<<< 

create-texture-from-surface
create-texture
destroy-texture
destroy-renderer

get-pixelformat-name
create-rgb24-surface
create-argb32-surface
create-rgb-surface

map-rgb
fill-rect
update-texture
update-window-surface
convert-surface
blit-surface
render-clear
render-copy
render-present
render-draw-line
render-draw-rect
render-fill-rect
render-draw-point



*quit*
*keydown*
*keyup*
*mousemotion*
*window-event*
*scancode-unknown* 
*scancode-a* 
*scancode-b* 
*scancode-c* 
*scancode-d* 
*scancode-e* 
*scancode-f* 
*scancode-g* 
*scancode-h* 
*scancode-i* 
*scancode-j* 
*scancode-k* 
*scancode-l* 
*scancode-m* 
*scancode-n* 
*scancode-o* 
*scancode-p* 
*scancode-q* 
*scancode-r* 
*scancode-s* 
*scancode-t* 
*scancode-u* 
*scancode-v* 
*scancode-w* 
*scancode-x* 
*scancode-y* 
*scancode-z* 
*scancode-1* 
*scancode-2* 
*scancode-3* 
*scancode-4* 
*scancode-5* 
*scancode-6* 
*scancode-7* 
*scancode-8* 
*scancode-9* 
*scancode-0* 
*scancode-return* 
*scancode-escape* 
*scancode-backspace* 
*scancode-tab* 
*scancode-space* 
*scancode-minus* 
*scancode-equals* 
*scancode-leftbracket* 
*scancode-rightbracket* 
*scancode-backslash* 
*scancode-nonushash* 
*scancode-semicolon* 
*scancode-apostrophe* 
*scancode-grave* 
*scancode-comma* 
*scancode-period* 
*scancode-slash* 
*scancode-capslock* 
*scancode-f1* 
*scancode-f2* 
*scancode-f3* 
*scancode-f4* 
*scancode-f5* 
*scancode-f6* 
*scancode-f7* 
*scancode-f8* 
*scancode-f9* 
*scancode-f10* 
*scancode-f11* 
*scancode-f12* 
*scancode-printscreen* 
*scancode-scrolllock* 
*scancode-pause* 
*scancode-insert* 
*scancode-home* 
*scancode-pageup* 
*scancode-delete* 
*scancode-end* 
*scancode-pagedown* 
*scancode-right* 
*scancode-left* 
*scancode-down* 
*scancode-up* 
*scancode-numlockclear* 
*scancode-kp-divide* 
*scancode-kp-multiply* 
*scancode-kp-minus* 
*scancode-kp-plus* 
*scancode-kp-enter* 
*scancode-kp-1* 
*scancode-kp-2* 
*scancode-kp-3* 
*scancode-kp-4* 
*scancode-kp-5* 
*scancode-kp-6* 
*scancode-kp-7* 
*scancode-kp-8* 
*scancode-kp-9* 
*scancode-kp-0* 
*scancode-kp-period* 
*scancode-nonusbackslash* 
*scancode-application* 
*scancode-power* 
*scancode-kp-equals* 
*scancode-f13* 
*scancode-f14* 
*scancode-f15* 
*scancode-f16* 
*scancode-f17* 
*scancode-f18* 
*scancode-f19* 
*scancode-f20* 
*scancode-f21* 
*scancode-f22* 
*scancode-f23* 
*scancode-f24* 
*scancode-execute* 
*scancode-help* 
*scancode-menu* 
*scancode-select* 
*scancode-stop* 
*scancode-again* 
*scancode-undo* 
*scancode-cut* 
*scancode-copy* 
*scancode-paste* 
*scancode-find* 
*scancode-mute* 
*scancode-volumeup* 
*scancode-volumedown* 
*scancode-lockingcapslock* 
*scancode-lockingnumlock* 
*scancode-lockingscrolllock* 
*scancode-kp-comma* 
*scancode-kp-equalsas400* 
*scancode-international1* 
*scancode-international2* 
*scancode-international3* 
*scancode-international4* 
*scancode-international5* 
*scancode-international6* 
*scancode-international7* 
*scancode-international8* 
*scancode-international9* 
*scancode-lang1* 
*scancode-lang2* 
*scancode-lang3* 
*scancode-lang4* 
*scancode-lang5* 
*scancode-lang6* 
*scancode-lang7* 
*scancode-lang8* 
*scancode-lang9* 
*scancode-alterase* 
*scancode-sysreq* 
*scancode-cancel* 
*scancode-clear* 
*scancode-prior* 
*scancode-return2* 
*scancode-separator* 
*scancode-out* 
*scancode-oper* 
*scancode-clearagain* 
*scancode-crsel* 
*scancode-exsel* 
*scancode-kp-00* 
*scancode-kp-000* 
*scancode-thousandsseparator* 
*scancode-decimalseparator* 
*scancode-currencyunit* 
*scancode-currencysubunit* 
*scancode-kp-leftparen* 
*scancode-kp-rightparen* 
*scancode-kp-leftbrace* 
*scancode-kp-rightbrace* 
*scancode-kp-tab* 
*scancode-kp-backspace* 
*scancode-kp-a* 
*scancode-kp-b* 
*scancode-kp-c* 
*scancode-kp-d* 
*scancode-kp-e* 
*scancode-kp-f* 
*scancode-kp-xor* 
*scancode-kp-power* 
*scancode-kp-percent* 
*scancode-kp-less* 
*scancode-kp-greater* 
*scancode-kp-ampersand* 
*scancode-kp-dblampersand* 
*scancode-kp-verticalbar* 
*scancode-kp-dblverticalbar* 
*scancode-kp-colon* 
*scancode-kp-hash* 
*scancode-kp-space* 
*scancode-kp-at* 
*scancode-kp-exclam* 
*scancode-kp-memstore* 
*scancode-kp-memrecall* 
*scancode-kp-memclear* 
*scancode-kp-memadd* 
*scancode-kp-memsubtract* 
*scancode-kp-memmultiply* 
*scancode-kp-memdivide* 
*scancode-kp-plusminus* 
*scancode-kp-clear* 
*scancode-kp-clearentry* 
*scancode-kp-binary* 
*scancode-kp-octal* 
*scancode-kp-decimal* 
*scancode-kp-hexadecimal* 
*scancode-lctrl* 
*scancode-lshift* 
*scancode-lalt* 
*scancode-lgui* 
*scancode-rctrl* 
*scancode-rshift* 
*scancode-ralt* 
*scancode-rgui* 
*scancode-mode* 
*scancode-audionext* 
*scancode-audioprev* 
*scancode-audiostop* 
*scancode-audioplay* 
*scancode-audiomute* 
*scancode-mediaselect* 
*scancode-www* 
*scancode-mail* 
*scancode-calculator* 
*scancode-computer* 
*scancode-ac-search* 
*scancode-ac-home* 
*scancode-ac-back* 
*scancode-ac-forward* 
*scancode-ac-stop* 
*scancode-ac-refresh* 
*scancode-ac-bookmarks* 
*scancode-brightnessdown* 
*scancode-brightnessup* 
*scancode-displayswitch* 
*scancode-kbdillumtoggle* 
*scancode-kbdillumdown* 
*scancode-kbdillumup* 
*scancode-eject* 
*scancode-sleep* 
*scancode-app1* 
*scancode-app2* 
*scancode-audiorewind* 
*scancode-audiofastforward* 
*scancode-softleft* 
*scancode-softright* 
*scancode-call* 
*scancode-endcall* 
*num-scancodes* 

*window-event-none* 
*window-event-shown* 
*window-event-hidden* 
*window-event-exposed* 
*window-event-moved* 
*window-event-resized* 
*window-event-changed* 
*window-event-minimized* 
*window-event-maximized* 
*window-event-restored* 
*window-event-enter* 
*window-event-leave* 
*window-event-focus-gained* 
*window-event-focus-lost* 
*window-event-close* 
*window-event-take-focus* 
*window-event-hit-test* 
*window-event-icc-prof-changed* 
*window-event-display-changed* 

;; libpixelformat.so 
;;pixelformat 
pixelformat2  
output-check
applyStretchedImage
size-int
upper-blit-scaled
  
;; *image-init-jpg*
;; *image-init-png*  
;; *image-init-tif*  
;; *image-init-webp* 
;; *image-init-jxl*  
;; *image-init-avif* 

;; %img-init
;; %img-load
;; image-load  
;; image-init


%create-renderer

surface-pixelformat-format
surface-pixelformat
surface-pixels  
surface-width
surface-height
surface-pitch

set-render-draw-color
show-rect

*renderer-software* 
*renderer-accelerated* 
*renderer-present-vsync* 
*renderer-target-texture* 
  
create-renderer

*window-fullscreen* 
*window-opengl* 
*window-shown* 
*window-hidden* 
*window-borderless* 
*window-resizeable* 
*window-minimized* 
*window-maximized* 
*window-mouse-grabbed* 
*window-input-focus* 
*window-mouse-focus* 
*window-fullscreen-desktop*
*window-foreign* 
*window-allow-highdpi* 
*window-mouse-capture* 
*window-always-on-top* 
*window-skip-taskbar* 
*window-utility* 
*window-tooltip* 
*window-popup-menu* 
*window-keyboard-grabbed* 
*window-vulkan* 
*window-metal*  
*window-input-grabbed*  

))

(use-modules (system foreign-library)) ;; probably only need system foreign
(use-modules (system foreign))


;; guile #x means HEX value follows #xFF is 255 decimal

(define *pixelformat-argb8888* 372645892)
(define *texture-streaming* 1)

(define *init-timer*             #x00000001)
(define *init-audio*             #x00000010)
(define *init-video*             #x00000020)
(define *init-joystick*          #x00000200)
(define *init-haptic*            #x00001000)
(define *init-gamecontroller*    #x00002000)
(define *init-events*            #x00004000)
(define *init-sensor*            #x00008000)
(define *init-parachute*         #x00100000)

;; guile logior is logical inclusive or
  
(define *init-everything*  (logior *init-timer*
				   *init-audio*
				   *init-video*
				   *init-events*
				   *init-joystick*
				   *init-haptic*
				   *init-gamecontroller*
				   *init-sensor*))

(define init
(foreign-library-function "libSDL2" "SDL_Init"
                            #:return-type int
                            #:arg-types (list uint32)))

(define quit
  (foreign-library-function "libSDL2" "SDL_Quit"
                            #:return-type void
                            #:arg-types (list)))

(define *window-fullscreen* #x00000001)
(define *window-opengl* #x00000002)
(define *window-shown* #x00000004)
(define *window-hidden* #x00000008)
(define *window-borderless* #x00000010)
(define *window-resizeable* #x00000020)
(define *window-minimized* #x00000040)
(define *window-maximized* #x00000080)
(define *window-mouse-grabbed* #x000000100)
(define *window-input-focus* #x000000200)
(define *window-mouse-focus* #x000000400)
(define *window-fullscreen-desktop* (logior *window-fullscreen* #x0001000))
(define *window-foreign* #x000000800)
(define *window-allow-highdpi* #x0000002000)
(define *window-mouse-capture* #x0000004000)
(define *window-always-on-top* #x0000008000)
(define *window-skip-taskbar* #x00000010000)
(define *window-utility* #x00000020000)
(define *window-tooltip* #x00000040000)
(define *window-popup-menu* #x00000080000)
(define *window-keyboard-grabbed* #x00100000)
(define *window-vulkan* #x10000000)
(define *window-metal*  #x20000000)
(define *window-input-grabbed*  *window-mouse-grabbed*)

;; how represent a char* in guile ffi ??
;; #:return-type '*  means a pointer   :: a quoted star symbol '*  , not scheme * multiply symbol
;; #:arg-types (list 
(define create-window 
  (foreign-library-function "libSDL2" "SDL_CreateWindow"
                            #:return-type '*
                            #:arg-types (list '* int int int int int)))



;; guile string -> char* use : string->pointer :
;; example
;; (string->pointer "my window")
;; will return an appropriate ? null terminated ? char* ?? for the guile string "my window"

;; ;; convenience middle of my screen 1920 x 1080 default resolution
;; (define (create-window title width height)
;;   (let ((x (floor (/ (- 1920 width) 2)))
;; 	(y (floor (/ (- 1080 height) 2)))
;; 	(flags (logior ;;*window-fullscreen-desktop*
;; 		        *window-resizeable*
;; 		        *window-allow-highdpi*
;; 			*window-always-on-top*
;; 			;;*window-fullscreen*
;; 		       ;;*window-borderless*
;; 		       *window-shown*)))
;;     (%create-window (string->pointer title) x y width height flags)))




(define (get-window-size win wid hgt)
  "get-window-size win* &wid &hgt"
  (lowlevel-get-window-size win wid hgt))

(define lowlevel-get-window-size
  (foreign-library-function "libSDL2" "SDL_GetWindowSize"
                            #:return-type void
                            #:arg-types (list '* '* '* )))

(define (get-renderer-output-size render wid hgt)
  "get-renderer-output-size render &wid &hgt"
  (lowlevel-get-renderer-output-size render wid hgt)) 

(define lowlevel-get-renderer-output-size
  (foreign-library-function "libSDL2" "SDL_GetRendererOutputSize"
                            #:return-type void
                            #:arg-types (list '* '* '* )))



;; gScreenSurface = SDL_GetWindowSurface( gWindow );
(define get-window-surface 
  (foreign-library-function "libSDL2" "SDL_GetWindowSurface"
                            #:return-type '*
                            #:arg-types (list '* )))

;; void SDL_FreeSurface(SDL_Surface * surface)
(define free-surface
  (foreign-library-function "libSDL2" "SDL_FreeSurface"
                            #:return-type void
                            #:arg-types (list '*)))



;;SDL_Surface* SDL_LoadBMP_RW(SDL_RWops * src, int freesrc);
(define load-bmp-rw
  (foreign-library-function "libSDL2" "SDL_LoadBMP_RW"
                            #:return-type '*
                            #:arg-types (list '* int)))


;; SDL_RWops* SDL_RWFromFile(const char *file, const char *mode);
(define rw-from-file
  ;; " guile ffi need string->pointer "
  (foreign-library-function "libSDL2" "SDL_RWFromFile"
                            #:return-type '*
                            #:arg-types (list '* '*)))


;; #define SDL_LoadBMP(file)   SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"), 1)
(define (load-bmp filename)
  "SDL_LoadBMP is a macro in C land
 becomes two required routines
 SDL_RWFromFile(file, \"rb\")
 SDL_LoadBMP_RW
 "
  (load-bmp-rw (rw-from-file (string->pointer filename) (string->pointer "rb")) 1))


;; int SDL_ShowCursor(int toggle);
(define show-cursor
  (foreign-library-function "libSDL2" "SDL_ShowCursor"
                            #:return-type int
                            #:arg-types (list int)))




#|
SDL_Texture* loadTexture( char *path , SDL_Renderer *render)
{
    //The final texture
    SDL_Texture* newTexture = NULL;

    //Load image at specified path
    SDL_Surface* loadedSurface = IMG_Load( path );
    if( loadedSurface == NULL )
    {
        printf( "Unable to load image %s! SDL_image Error: %s\n", path, IMG_GetError() );
    }
    else
    {
        //Create texture from surface pixels
        newTexture = SDL_CreateTextureFromSurface( render, loadedSurface );
        if( newTexture == NULL )
        {
            printf( "Unable to create texture from %s! SDL Error: %s\n", path, SDL_GetError() );
        }

        //Get rid of old loaded surface
        SDL_FreeSurface( loadedSurface );
    }

    return newTexture;
}
|#

(define (load-texture path render)
  (define loaded-surface (%img-load (string->pointer path)))
  (cond
   ((equal? loaded-surface %null-pointer)
    (format #t "unable to load image ~a ~%" path)
    %null-pointer)
   (#t (let ((new-texture (create-texture-from-surface render loaded-surface)))
	 (cond
	  ((equal? new-texture %null-pointer)
	   (format #t "unable to create texture from image ~a ~%" path)
	   %null-pointer)
	  (#t (free-surface loaded-surface)
	      new-texture))))))


  

;; nm -D /usr/lib/x86_64-linux-gnu/libSDL2.so | grep SDL_LoadBMP
;; 000000000004c620 T SDL_LoadBMP_RW
;;
;; C macros strikes again - no such thing in shared library 
;; In procedure dlsym: Error resolving "SDL_LoadBMP": "/usr/lib/x86_64-linux-gnu/libSDL2.so: undefined symbol: SDL_LoadBMP"
;;  #define SDL_LoadBMP(file)   SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"), 1)
;;



(define (create-rgb-surface  flags w h d r g b a)
  "SDL_Surface* SDL_CreateRGBSurface
    (Uint32 flags, int width, int height, int depth,
     Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask)"
  (lowlevel-create-rgb-surface flags w h d r g b a))

(define lowlevel-create-rgb-surface
  (foreign-library-function "libSDL2" "SDL_CreateRGBSurface"
                            #:return-type '*
                            #:arg-types (list uint32 int int int
					      uint32 uint32 uint32 uint32)))





;; usage
;;SDL_DestroyWindow( gWindow );
(define destroy-window
  (foreign-library-function "libSDL2" "SDL_DestroyWindow"
                            #:return-type void
                            #:arg-types (list '* )))


(define (create-texture r f a w h)
  "SDL_Texture * SDL_CreateTexture(SDL_Renderer * renderer,
                                Uint32 format,
                                int access, int w,
                                int h)"
  (lowlevel-create-texture r f a w h))

(define lowlevel-create-texture 
  (foreign-library-function "libSDL2" "SDL_CreateTexture"
                            #:return-type '*
                            #:arg-types (list '* uint32 int int int)))







;;SDL_Texture * SDL_CreateTextureFromSurface(SDL_Renderer * renderer, SDL_Surface * surface);
(define create-texture-from-surface
  (foreign-library-function "libSDL2" "SDL_CreateTextureFromSurface"
                            #:return-type '*
                            #:arg-types (list '* '*)))


;;void SDL_DestroyTexture(SDL_Texture * texture);
(define destroy-texture
  (foreign-library-function "libSDL2" "SDL_DestroyTexture"
                            #:return-type void
                            #:arg-types (list '*)))



;;SDL_DestroyRenderer
;;void SDL_DestroyRenderer(SDL_Renderer * renderer);
(define destroy-renderer
  (foreign-library-function "libSDL2" "SDL_DestroyRenderer"
                            #:return-type void
                            #:arg-types (list '*)))





;; usage
;; int flags = 0; // flags unused should be set to 0 ??
;; 	  int width = SCREEN_WIDTH; // 640 pixels wide
;; 	  int height = SCREEN_HEIGHT; // 480 pixels high
;; 	  int depth = 32; // 32 bits - cairo only understands 32 bits
;; 	  SDL_Surface *sdlsurf = SDL_CreateRGBSurface (
;; 						       flags, width, height, depth,
;; 						       0x00FF0000, /* Rmask */
;; 						       0x0000FF00, /* Gmask */
;; 						       0x000000FF, /* Bmask */
;; 						       0); /* Amask */
;; ;; SDL_Surface* SDL_CreateRGBSurface
;; ;;     (Uint32 flags, int width, int height, int depth,               u i i i
;; ;;      Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);      u u u u
;; (define create-rgb-surface  
;;   (foreign-library-function "libSDL2" "SDL_CreateRGBSurface"
;;                             #:return-type '*
;;                             #:arg-types (list uint32 int int int
;; 					      uint32 uint32 uint32 uint32)))

;;
;; source : https://www.cairographics.org/SDL/
;;
;; SDL_Surface *sdlsurf = SDL_CreateRGBSurface (
;;     flags, width, height, 32,
;;     0x00FF0000, /* Rmask */
;;     0x0000FF00, /* Gmask */
;;     0x000000FF, /* Bmask */
;;     0); /* Amask */
;;
;; /* ... make sure sdlsurf is locked or doesn't need locking ... */
;;
;; cairo_surface_t *cairosurf = cairo_image_surface_create_for_data (
;;     sdlsurf->pixels,
;;     CAIRO_FORMAT_RGB24,
;;     sdlsurf->w,
;;     sdlsurf->h,
;;     sdlsurf->pitch);
;;
;; /* ... normal cairo calls ... */
(define (create-rgb24-surface width height)
  (let ((flags 0) ;;unused
	(depth 32) ;; only depth SDL and CAIRO agree on
	(rmask #x00FF0000) ;; red mask
	(gmask #x0000FF00) ;; green mask
	(bmask #x000000FF) ;; blue mask
	(amask #x0)) ;; alpha mask - unused	
    (create-rgb-surface flags width height depth rmask gmask bmask amask)))


(define (create-argb32-surface width height) ;; with alpha !
  (let ((flags 0) ;;unused
	(depth 32) ;; only depth SDL and CAIRO agree on
	(rmask #x00FF0000) ;; red mask
	(gmask #x0000FF00) ;; green mask
	(bmask #x000000FF) ;; blue mask
	(amask #xFF000000)) ;; alpha mask 
    (create-rgb-surface flags width height depth rmask gmask bmask amask)))




;; guile (use-modules (system foreign)) exposes typical C types uint8 uint32 etc..
;; assuming NULL is just 0
;; Uint32 SDL_MapRGB(const SDL_PixelFormat * format,  Uint8 r, Uint8 g, Uint8 b);
(define map-rgb
  (foreign-library-function "libSDL2" "SDL_MapRGB"
                            #:return-type uint32
                            #:arg-types (list '* uint8 uint8 uint8)))


;; int SDL_FillRect (SDL_Surface * dst, const SDL_Rect * rect, Uint32 color);
;; returns 0 on success
(define fill-rect
  (foreign-library-function "libSDL2" "SDL_FillRect"
			    #:return-type int
                            #:arg-types (list '* '* uint32)))



(define (update-texture t r p p2)
  "int SDL_UpdateTexture(SDL_Texture * texture, const SDL_Rect * rect, const void *pixels, int pitch"
  (lowlevel-update-texture t r p p2))

(define lowlevel-update-texture
  (foreign-library-function "libSDL2" "SDL_UpdateTexture"
			    #:return-type int
                            #:arg-types (list '* '* '* int)))




;; int SDL_UpdateWindowSurface(SDL_Window * window);
(define update-window-surface
  (foreign-library-function "libSDL2" "SDL_UpdateWindowSurface"
			    #:return-type int
                            #:arg-types (list '*)))


#|
https://lazyfoo.net/tutorials/SDL/05_optimized_surface_loading_and_soft_stretching/index.php

SDL_Surface* SDL_ConvertSurface
(SDL_Surface * src, const SDL_PixelFormat * fmt, Uint32 flags;)
|#
(define convert-surface
  (foreign-library-function "libSDL2" "SDL_ConvertSurface"
			    #:return-type '*
                            #:arg-types (list '* '* uint32)))







;; ======================== cairo stuff ========================================

#|
cairo_surface_t *cairosurf = cairo_image_surface_create_for_data (
									    (unsigned char*)sdlsurf->pixels,
									    CAIRO_FORMAT_RGB24,
									    sdlsurf->w,
									    sdlsurf->h,
									    sdlsurf->pitch);
	  

#define SDL_BlitSurface SDL_UpperBlit
int SDL_UpperBlit
    (SDL_Surface * src, const SDL_Rect * srcrect,
     SDL_Surface * dst, SDL_Rect * dstrect);

|#
(define blit-surface 
  (foreign-library-function "libSDL2" "SDL_UpperBlit"
			    #:return-type int
                            #:arg-types (list '* '* '* '*)))


;; render-clear
;; int SDL_RenderClear(SDL_Renderer * renderer);
(define render-clear
  (foreign-library-function "libSDL2" "SDL_RenderClear"
			    #:return-type int
                            #:arg-types (list '*)))

;; int SDL_RenderCopy(SDL_Renderer * renderer,
;;                    SDL_Texture * texture,
;;                    const SDL_Rect * srcrect,
;;                    const SDL_Rect * dstrect);
(define render-copy
  (foreign-library-function "libSDL2" "SDL_RenderCopy"
			    #:return-type int
                            #:arg-types (list '* '* '* '*)))

;; void SDL_RenderPresent(SDL_Renderer * renderer);
(define render-present
  (foreign-library-function "libSDL2" "SDL_RenderPresent"
			    #:return-type int
                            #:arg-types (list '*)))


;; int SDL_RenderDrawLine(SDL_Renderer * renderer,
;;                        int x1, int y1, int x2, int y2);
(define render-draw-line
  (foreign-library-function "libSDL2" "SDL_RenderDrawLine"
			    #:return-type int
                            #:arg-types (list '* int int int int)))

;; int SDL_RenderDrawRect(SDL_Renderer * renderer,   const SDL_Rect * rect);
(define render-draw-rect
  (foreign-library-function "libSDL2" "SDL_RenderDrawRect"
			    #:return-type int
                            #:arg-types (list '* '*)))

;; int SDL_RenderFillRect(SDL_Renderer * renderer,
;;                        const SDL_Rect * rect);
(define render-fill-rect
  (foreign-library-function "libSDL2" "SDL_RenderFillRect"
			    #:return-type int
                            #:arg-types (list '* '*)))


;; int SDL_RenderDrawPoint(SDL_Renderer * renderer,
;;                         int x, int y);
(define render-draw-point
  (foreign-library-function "libSDL2" "SDL_RenderDrawPoint"
			    #:return-type int
                            #:arg-types (list '* int int)))



(define poll-event
  (foreign-library-function "libSDL2" "SDL_PollEvent"
			    #:return-type int
                            #:arg-types (list '*)))



(define *quit* #x100)
(define *keydown* #x300)
(define *keyup* #x301)
(define *mousemotion* #x400)
(define *window-event* #x200)

(define *scancode-unknown* 0) 
(define *scancode-a* 4) 
(define *scancode-b* 5) 
(define *scancode-c* 6) 
(define *scancode-d* 7) 
(define *scancode-e* 8) 
(define *scancode-f* 9) 
(define *scancode-g* 10) 
(define *scancode-h* 11) 
(define *scancode-i* 12) 
(define *scancode-j* 13) 
(define *scancode-k* 14) 
(define *scancode-l* 15) 
(define *scancode-m* 16) 
(define *scancode-n* 17) 
(define *scancode-o* 18) 
(define *scancode-p* 19) 
(define *scancode-q* 20) 
(define *scancode-r* 21) 
(define *scancode-s* 22) 
(define *scancode-t* 23) 
(define *scancode-u* 24) 
(define *scancode-v* 25) 
(define *scancode-w* 26) 
(define *scancode-x* 27) 
(define *scancode-y* 28) 
(define *scancode-z* 29) 
(define *scancode-1* 30) 
(define *scancode-2* 31) 
(define *scancode-3* 32) 
(define *scancode-4* 33) 
(define *scancode-5* 34) 
(define *scancode-6* 35) 
(define *scancode-7* 36) 
(define *scancode-8* 37) 
(define *scancode-9* 38) 
(define *scancode-0* 39) 
(define *scancode-return* 40) 
(define *scancode-escape* 41) 
(define *scancode-backspace* 42) 
(define *scancode-tab* 43) 
(define *scancode-space* 44) 
(define *scancode-minus* 45) 
(define *scancode-equals* 46) 
(define *scancode-leftbracket* 47) 
(define *scancode-rightbracket* 48) 
(define *scancode-backslash* 49) 
(define *scancode-nonushash* 50) 
(define *scancode-semicolon* 51) 
(define *scancode-apostrophe* 52) 
(define *scancode-grave* 53) 
(define *scancode-comma* 54) 
(define *scancode-period* 55) 
(define *scancode-slash* 56) 
(define *scancode-capslock* 57) 
(define *scancode-f1* 58) 
(define *scancode-f2* 59) 
(define *scancode-f3* 60) 
(define *scancode-f4* 61) 
(define *scancode-f5* 62) 
(define *scancode-f6* 63) 
(define *scancode-f7* 64) 
(define *scancode-f8* 65) 
(define *scancode-f9* 66) 
(define *scancode-f10* 67) 
(define *scancode-f11* 68) 
(define *scancode-f12* 69) 
(define *scancode-printscreen* 70) 
(define *scancode-scrolllock* 71) 
(define *scancode-pause* 72) 
(define *scancode-insert* 73) 
(define *scancode-home* 74) 
(define *scancode-pageup* 75) 
(define *scancode-delete* 76) 
(define *scancode-end* 77) 
(define *scancode-pagedown* 78) 
(define *scancode-right* 79) 
(define *scancode-left* 80) 
(define *scancode-down* 81) 
(define *scancode-up* 82) 
(define *scancode-numlockclear* 83) 
(define *scancode-kp-divide* 84) 
(define *scancode-kp-multiply* 85) 
(define *scancode-kp-minus* 86) 
(define *scancode-kp-plus* 87) 
(define *scancode-kp-enter* 88) 
(define *scancode-kp-1* 89) 
(define *scancode-kp-2* 90) 
(define *scancode-kp-3* 91) 
(define *scancode-kp-4* 92) 
(define *scancode-kp-5* 93) 
(define *scancode-kp-6* 94) 
(define *scancode-kp-7* 95) 
(define *scancode-kp-8* 96) 
(define *scancode-kp-9* 97) 
(define *scancode-kp-0* 98) 
(define *scancode-kp-period* 99) 
(define *scancode-nonusbackslash* 100) 
(define *scancode-application* 101) 
(define *scancode-power* 102) 
(define *scancode-kp-equals* 103) 
(define *scancode-f13* 104) 
(define *scancode-f14* 105) 
(define *scancode-f15* 106) 
(define *scancode-f16* 107) 
(define *scancode-f17* 108) 
(define *scancode-f18* 109) 
(define *scancode-f19* 110) 
(define *scancode-f20* 111) 
(define *scancode-f21* 112) 
(define *scancode-f22* 113) 
(define *scancode-f23* 114) 
(define *scancode-f24* 115) 
(define *scancode-execute* 116) 
(define *scancode-help* 117) 
(define *scancode-menu* 118) 
(define *scancode-select* 119) 
(define *scancode-stop* 120) 
(define *scancode-again* 121) 
(define *scancode-undo* 122) 
(define *scancode-cut* 123) 
(define *scancode-copy* 124) 
(define *scancode-paste* 125) 
(define *scancode-find* 126) 
(define *scancode-mute* 127) 
(define *scancode-volumeup* 128) 
(define *scancode-volumedown* 129) 
(define *scancode-lockingcapslock* 130) 
(define *scancode-lockingnumlock* 131) 
(define *scancode-lockingscrolllock* 132) 
(define *scancode-kp-comma* 133) 
(define *scancode-kp-equalsas400* 134) 
(define *scancode-international1* 135) 
(define *scancode-international2* 136) 
(define *scancode-international3* 137) 
(define *scancode-international4* 138) 
(define *scancode-international5* 139) 
(define *scancode-international6* 140) 
(define *scancode-international7* 141) 
(define *scancode-international8* 142) 
(define *scancode-international9* 143) 
(define *scancode-lang1* 144) 
(define *scancode-lang2* 145) 
(define *scancode-lang3* 146) 
(define *scancode-lang4* 147) 
(define *scancode-lang5* 148) 
(define *scancode-lang6* 149) 
(define *scancode-lang7* 150) 
(define *scancode-lang8* 151) 
(define *scancode-lang9* 152) 
(define *scancode-alterase* 153) 
(define *scancode-sysreq* 154) 
(define *scancode-cancel* 155) 
(define *scancode-clear* 156) 
(define *scancode-prior* 157) 
(define *scancode-return2* 158) 
(define *scancode-separator* 159) 
(define *scancode-out* 160) 
(define *scancode-oper* 161) 
(define *scancode-clearagain* 162) 
(define *scancode-crsel* 163) 
(define *scancode-exsel* 164) 
(define *scancode-kp-00* 176) 
(define *scancode-kp-000* 177) 
(define *scancode-thousandsseparator* 178) 
(define *scancode-decimalseparator* 179) 
(define *scancode-currencyunit* 180) 
(define *scancode-currencysubunit* 181) 
(define *scancode-kp-leftparen* 182) 
(define *scancode-kp-rightparen* 183) 
(define *scancode-kp-leftbrace* 184) 
(define *scancode-kp-rightbrace* 185) 
(define *scancode-kp-tab* 186) 
(define *scancode-kp-backspace* 187) 
(define *scancode-kp-a* 188) 
(define *scancode-kp-b* 189) 
(define *scancode-kp-c* 190) 
(define *scancode-kp-d* 191) 
(define *scancode-kp-e* 192) 
(define *scancode-kp-f* 193) 
(define *scancode-kp-xor* 194) 
(define *scancode-kp-power* 195) 
(define *scancode-kp-percent* 196) 
(define *scancode-kp-less* 197) 
(define *scancode-kp-greater* 198) 
(define *scancode-kp-ampersand* 199) 
(define *scancode-kp-dblampersand* 200) 
(define *scancode-kp-verticalbar* 201) 
(define *scancode-kp-dblverticalbar* 202) 
(define *scancode-kp-colon* 203) 
(define *scancode-kp-hash* 204) 
(define *scancode-kp-space* 205) 
(define *scancode-kp-at* 206) 
(define *scancode-kp-exclam* 207) 
(define *scancode-kp-memstore* 208) 
(define *scancode-kp-memrecall* 209) 
(define *scancode-kp-memclear* 210) 
(define *scancode-kp-memadd* 211) 
(define *scancode-kp-memsubtract* 212) 
(define *scancode-kp-memmultiply* 213) 
(define *scancode-kp-memdivide* 214) 
(define *scancode-kp-plusminus* 215) 
(define *scancode-kp-clear* 216) 
(define *scancode-kp-clearentry* 217) 
(define *scancode-kp-binary* 218) 
(define *scancode-kp-octal* 219) 
(define *scancode-kp-decimal* 220) 
(define *scancode-kp-hexadecimal* 221) 
(define *scancode-lctrl* 224) 
(define *scancode-lshift* 225) 
(define *scancode-lalt* 226) 
(define *scancode-lgui* 227) 
(define *scancode-rctrl* 228) 
(define *scancode-rshift* 229) 
(define *scancode-ralt* 230) 
(define *scancode-rgui* 231) 
(define *scancode-mode* 257) 
(define *scancode-audionext* 258) 
(define *scancode-audioprev* 259) 
(define *scancode-audiostop* 260) 
(define *scancode-audioplay* 261) 
(define *scancode-audiomute* 262) 
(define *scancode-mediaselect* 263) 
(define *scancode-www* 264) 
(define *scancode-mail* 265) 
(define *scancode-calculator* 266) 
(define *scancode-computer* 267) 
(define *scancode-ac-search* 268) 
(define *scancode-ac-home* 269) 
(define *scancode-ac-back* 270) 
(define *scancode-ac-forward* 271) 
(define *scancode-ac-stop* 272) 
(define *scancode-ac-refresh* 273) 
(define *scancode-ac-bookmarks* 274) 
(define *scancode-brightnessdown* 275) 
(define *scancode-brightnessup* 276) 
(define *scancode-displayswitch* 277) 
(define *scancode-kbdillumtoggle* 278) 
(define *scancode-kbdillumdown* 279) 
(define *scancode-kbdillumup* 280) 
(define *scancode-eject* 281) 
(define *scancode-sleep* 282) 
(define *scancode-app1* 283) 
(define *scancode-app2* 284) 
(define *scancode-audiorewind* 285) 
(define *scancode-audiofastforward* 286) 
(define *scancode-softleft* 287) 
(define *scancode-softright* 288) 
(define *scancode-call* 289) 
(define *scancode-endcall* 290) 
(define *num-scancodes* 512)

(define *window-event-none* 0)
(define *window-event-shown* 1)
(define *window-event-hidden* 2)
(define *window-event-exposed* 3)
(define *window-event-moved* 4)
(define *window-event-resized* 5)
(define *window-event-changed* 6)
(define *window-event-minimized* 7)
(define *window-event-maximized* 8)
(define *window-event-restored* 9)
(define *window-event-enter* 10)
(define *window-event-leave* 11)
(define *window-event-focus-gained* 12)
(define *window-event-focus-lost* 13)
(define *window-event-close* 14)
(define *window-event-take-focus* 15)
(define *window-event-hit-test* 16)
(define *window-event-icc-prof-changed* 17)
(define *window-event-display-changed* 18)

;;(define show-pixelformat (foreign-library-pointer "pixelformat" "show_pixelformat_format"))
;;(define init-pixelformat (foreign-library-pointer "pixelformat" "init_pixelformat"))

(define sanity-check-hack
  (foreign-library-function "libpixelformat" "sanity_check_hack"
                            #:return-type void
                            #:arg-types (list '* '* '*)))
  


(define pixelformat2
  (foreign-library-function "libpixelformat" "pixelformat2"
                            #:return-type void
                            #:arg-types (list '*)))

(define output-check
  (foreign-library-function "libpixelformat" "output_check"
                            #:return-type void
                            #:arg-types (list)))


(define applyStretchedImage
  (foreign-library-function "libpixelformat" "applyStretchedImage"
                            #:return-type '*
                            #:arg-types (list '* int int)))


(define size-int
  (foreign-library-function "libpixelformat" "size_int"
                            #:return-type int
                            #:arg-types (list)))




;; int SDL_UpperBlitScaled
;;   (SDL_Surface * src, const SDL_Rect * srcrect,
;;   SDL_Surface * dst, SDL_Rect * dstrect);
(define upper-blit-scaled
  (foreign-library-function "libSDL2" "SDL_UpperBlitScaled"
                            #:return-type int
                            #:arg-types (list '* '* '* '*)))
  


;;%img-init
;;image-init

;;SDL_Surface * IMG_Load(const char *file);
(define %img-load
  (foreign-library-function "libSDL2_image" "IMG_Load"
                            #:return-type '*
                            #:arg-types (list '*)))

;; convert guile string to char* 
(define (image-load path)
  (%img-load (string->pointer path)))

 
;; (define upper-blit-scaled
;;   (foreign-library-function "libSDL2_ttf" "TTF-C-FUNCTION-HERE"
;;                             #:return-type int
;;                             #:arg-types (list '* '* '* '*)))

;; (define upper-blit-scaled
;;   (foreign-library-function "libSDL2_mixer" "MIXER-C-FUNCTION-HERE"
;;                             #:return-type int
;;                             #:arg-types (list '* '* '* '*)))


;; SDL_Renderer * SDL_CreateRenderer(SDL_Window * window,
;;                        int index, Uint32 flags);
(define create-renderer
  (foreign-library-function "libSDL2" "SDL_CreateRenderer"
                            #:return-type '*
                            #:arg-types (list '* int uint32)))




;; uint32_t surface_pixelformat_format(SDL_Surface *s);
(define surface-pixelformat-format
  (foreign-library-function "libpixelformat" "surface_pixelformat_format"
                            #:return-type uint32
                            #:arg-types (list '*)))


(define surface-pixelformat
  (foreign-library-function "libpixelformat" "surface_pixelformat"
                            #:return-type '*
                            #:arg-types (list '*)))


;; unsigned char * surface_pixels(SDL_Surface *s)
;; "void * surface_pixels(SDL_Surface *s)"  
(define surface-pixels
  (foreign-library-function "libpixelformat" "surface_pixels"
                            #:return-type '*
                            #:arg-types (list '*)))

;;"int surface_pixels(SDL_Surface *s)"
(define surface-pitch
  (foreign-library-function "libpixelformat" "surface_pitch"
                            #:return-type int
                            #:arg-types (list '*)))

;; int surface_width(SDL_Surface *s)
(define surface-width
  (foreign-library-function "libpixelformat" "surface_width"
                            #:return-type int
                            #:arg-types (list '*)))

;;int surface_height(SDL_Surface *s)
(define surface-height
  (foreign-library-function "libpixelformat" "surface_height"
                            #:return-type int
                            #:arg-types (list '*)))

;;const char* SDL_GetPixelFormatName(Uint32 format);
(define get-pixelformat-name
  (foreign-library-function "libSDL2" "SDL_GetPixelFormatName"
                            #:return-type '*
                            #:arg-types (list uint32)))


;; int SDL_LockSurface(SDL_Surface * surface);
(define lock-surface 
  (foreign-library-function "libSDL2" "SDL_LockSurface"
                            #:return-type int
                            #:arg-types (list '*)))

(define unlock-surface 
  (foreign-library-function "libSDL2" "SDL_UnlockSurface"
                            #:return-type void
                            #:arg-types (list '*)))



(define (set-render-draw-color ren r g b a)
  " int SDL_SetRenderDrawColor(SDL_Renderer * renderer,
                    Uint8 r, Uint8 g, Uint8 b,
                    Uint8 a)
  color values red green blue alpha are 0 to 255 , not floats
  "
  (lowlevel-set-render-draw-color ren r g b a))


(define lowlevel-set-render-draw-color
  (foreign-library-function "libSDL2" "SDL_SetRenderDrawColor"
                            #:return-type int
                            #:arg-types (list '* uint8 uint8 uint8 uint8)))

(define show-rect
  (foreign-library-function "libpixelformat" "show_rect"
                            #:return-type void
                            #:arg-types (list '*)))



;; (define %load-texture
;;   (foreign-library-function "libpixelformat" "loadTexture"
;;                             #:return-type '*
;;                             #:arg-types (list '* '*)))
  
;; (define (load-texture s render)
;;   (%load-texture (string->pointer s) render))



#|
typedef enum SDL_RendererFlags
{
    SDL_RENDERER_SOFTWARE = 0x00000001,         /**< The renderer is a software fallback */
    SDL_RENDERER_ACCELERATED = 0x00000002,      /**< The renderer uses hardware
                                                     acceleration */
    SDL_RENDERER_PRESENTVSYNC = 0x00000004,     /**< Present is synchronized
                                                     with the refresh rate */
    SDL_RENDERER_TARGETTEXTURE = 0x00000008     /**< The renderer supports
                                                     rendering to texture */
} SDL_RendererFlags;
|#

(define *renderer-software* #x00000001)
(define *renderer-accelerated* #x00000002)
(define *renderer-present-vsync* #x00000004)
(define *renderer-target-texture* #x00000008)

;; ;; if %null-pointer create renderer failed
;; (define (create-renderer window)
;;   "create-renderer window"
;;   (%create-renderer window -1 (logior *renderer-accelerated*
;; 				      *renderer-target-texture*)))



(define dummy 0)


;;int SDL_SetColorKey(SDL_Surface * surface, int flag, Uint32 key);
(define set-color-key
  (foreign-library-function "libSDL2" "SDL_SetColorKey"
                            #:return-type int
                            #:arg-types (list '* int uint32)))




