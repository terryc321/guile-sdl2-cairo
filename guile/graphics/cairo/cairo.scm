;; autogenerated file from documentation sdl.org file via emacs
;;well , almost . meh
;; c lacks module system so we can drop cairo prefix on operators 
;; cairo-
;; still interesting to see if name clash

(define-module (graphics cairo cairo)
  #:export (

	    identity-matrix
	    *operator-source
	    
	    translate
	    scale
	    
	    set-operator	    
	    paint
	    surface-destroy	    

	    *format-rgb24* ;; ??
	    *format-argb32*
	    format-stride-for-width
	    image-surface-create

	    image-surface-create-for-data
	    rectangle
	    set-source-rgb
	    set-source-rgba
	    create
	    fill
	    surface-flush

	    set-line-width
	    stroke
	    arc
	    line-to
	    destroy
	    
	    version-string
	    ))

(use-modules (system foreign-library)) ;; probably only need system foreign
(use-modules (system foreign))


(define *operator-source*  1) 


(define identity-matrix
  (foreign-library-function "libcairo" "cairo_identity_matrix"
                            #:return-type void
                            #:arg-types (list '*)))

;; void
;; cairo_translate (cairo_t *cr,
;;                  double tx,
;;                  double ty);
(define translate
  (foreign-library-function "libcairo" "cairo_translate"
                            #:return-type void
                            #:arg-types (list '* double double)))

;; void
;; cairo_scale (cairo_t *cr,
;;              double sx,
;;              double sy);
(define scale
  (foreign-library-function "libcairo" "cairo_scale"
                            #:return-type void
                            #:arg-types (list '* double double)))


;;void cairo_set_operator (cairo_t *cr, cairo_operator_t op);
(define set-operator
  (foreign-library-function "libcairo" "cairo_set_operator"
                            #:return-type void
                            #:arg-types (list '* int)))

(define surface-destroy	 
  (foreign-library-function "libcairo" "cairo_surface_destroy"
                            #:return-type void
                            #:arg-types (list '*)))



;; void cairo_paint (cairo_t *cr);
(define paint 	       
  (foreign-library-function "libcairo" "cairo_paint"
			    #:return-type void
                            #:arg-types (list '*)))



;; from reference/001/demo
;; /usr/include/SDL2/SDL_pixels.h 
(define *format-rgb24* 1)
(define *format-argb32* 0)


;;int cairo_format_stride_for_width (cairo_format_t format,    int width);
;; cairo_format_t enum = int
(define format-stride-for-width
  (foreign-library-function "libcairo" "cairo_format_stride_for_width"
                            #:return-type int
                            #:arg-types (list int int)))


;; cairo_surface_t *
;; cairo_image_surface_create (cairo_format_t format, ;; enum = int
;;                             int width,
;;                             int height);
(define image-surface-create
  (foreign-library-function "libcairo" "cairo_image_surface_create"
                            #:return-type '*
                            #:arg-types (list int int int)))



;; cairo_surface_t *
;; cairo_image_surface_create_for_data (unsigned char *data,
;;                                      cairo_format_t format,  ;; enum = int
;;                                      int width,
;;                                      int height,
;;                                      int stride);
(define image-surface-create-for-data
  (foreign-library-function "libcairo" "cairo_image_surface_create_for_data"
                            #:return-type '*
                            #:arg-types (list '* int int int int)))

;; void
;; cairo_rectangle (cairo_t *cr,
;;                  double x,
;;                  double y,
;;                  double width,
;;                  double height);
(define rectangle
  (foreign-library-function "libcairo" "cairo_rectangle"
                            #:return-type void
                            #:arg-types (list '* double double double double)))



(define set-source-rgb
  (foreign-library-function "libcairo" "cairo_set_source_rgb"
                            #:return-type void
                            #:arg-types (list '* double double double)))





;; void
;; cairo_set_source_rgba (cairo_t *cr,
;;                        double red,
;;                        double green,
;;                        double blue,
;;                        double alpha);
(define set-source-rgba
  (foreign-library-function "libcairo" "cairo_set_source_rgba"
                            #:return-type void
                            #:arg-types (list '* double double double double)))




;; cairo_t *cairo_create( cairo_surface_t *)
;; cairo_t is cairo context
;; cairo_surface_t is a surface compatible with cairo 24 bit 
(define create
  (foreign-library-function "libcairo" "cairo_create"
                            #:return-type '*
                            #:arg-types (list '*)))


(define fill
  (foreign-library-function "libcairo" "cairo_fill"
                            #:return-type void
                            #:arg-types (list '*)))


(define set-line-width
  (foreign-library-function "libcairo" "cairo_set_line_width"
                            #:return-type void
                            #:arg-types (list '* double)))

(define stroke
  (foreign-library-function "libcairo" "cairo_stroke"
                            #:return-type void
                            #:arg-types (list '*)))


(define arc
  (foreign-library-function "libcairo" "cairo_arc"
                            #:return-type void
                            #:arg-types (list '*
					      double
					      double
					      double
					      double
					      double)))

(define line-to
  (foreign-library-function "libcairo" "cairo_line_to"
                            #:return-type void
                            #:arg-types (list '* double double)))



(define surface-flush 
  (foreign-library-function "libcairo" "cairo_surface_flush"
			    #:return-type void
			    #:arg-types (list '*)))

(define destroy
  (foreign-library-function "libcairo" "cairo_destroy"
                            #:return-type void
                            #:arg-types (list '*)))

(define version-string
  (foreign-library-function "libcairo" "cairo_version_string"
                            #:return-type '*
                            #:arg-types (list)))

